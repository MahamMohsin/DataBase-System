











--Q2
-- Create Customers Table
CREATE TABLE customers (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(25) NOT NULL,
    last_name VARCHAR2(25) NOT NULL,
    email VARCHAR2(50) NOT NULL UNIQUE,
    phone VARCHAR2(20) NOT NULL UNIQUE
);

-- Create Products Table
CREATE TABLE products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(25) NOT NULL,
    price NUMBER CHECK (price > 0),
    stock_qty NUMBER CHECK (stock_qty >= 0)
);

-- Create Orders Table
CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    order_date DATE DEFAULT SYSDATE NOT NULL,
    status VARCHAR2(20) CHECK (status IN ('pending', 'shipped', 'delivered', 'cancelled')),
    CONSTRAINT fk_custid FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Create Order Items Table
CREATE TABLE order_items (
    order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    quantity NUMBER NOT NULL CHECK (quantity >= 1),
    subtotal NUMBER(10,2),
    CONSTRAINT fk_oid FOREIGN KEY (order_id) REFERENCES orders(order_id),
    CONSTRAINT fk_pid FOREIGN KEY (product_id) REFERENCES products(product_id),
    UNIQUE (order_id, product_id)
);

-- Insert Data into Customers
INSERT INTO customers (first_name, last_name, email, phone)
VALUES ('Ali', 'Raza', 'ali.raza@gmail.com', '03001234567');

-- Insert Data into Products
INSERT INTO products (product_name, price, stock_qty)
VALUES ('Laptop', 100000, 10);

-- Insert into Orders (corrected syntax)
INSERT INTO orders (customer_id, order_date, status)
VALUES (
    (SELECT customer_id FROM customers WHERE email = 'ali.raza@gmail.com'),
    SYSDATE,
    'pending'
);

-- Insert into Order Items (corrected subtotal calculation)
INSERT INTO order_items (order_id, product_id, quantity, subtotal)
VALUES (
    (SELECT order_id FROM orders WHERE customer_id =
        (SELECT customer_id FROM customers WHERE email = 'ali.raza@gmail.com')),
    (SELECT product_id FROM products WHERE product_name = 'Laptop'),
    2,
    (SELECT price * 2 FROM products WHERE product_name = 'Laptop')
);

-- Update Product Stock (fixed typo: stock_qty)
UPDATE products
SET stock_qty = stock_qty - 2
WHERE LOWER(product_name) = 'laptop';

-- Update Order Status
UPDATE orders
SET status = 'shipped'
WHERE customer_id = (SELECT customer_id FROM customers WHERE email = 'ali.raza@gmail.com');

-- Find all orders with total worth > 50,000
SELECT o.order_id, c.first_name, c.last_name, SUM(oi.subtotal) AS total_worth
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY o.order_id, c.first_name, c.last_name
HAVING SUM(oi.subtotal) > 50000;

-- Find the most frequently ordered product
SELECT p.product_name, COUNT(*) AS times_ordered
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_name
HAVING COUNT(*) = (
    SELECT MAX(COUNT(*))
    FROM order_items
    GROUP BY product_id
);




--Q3

CREATE TABLE customer (
    customer_id         NUMBER NOT NULL,
    first_name          VARCHAR2(25),
    last_name           VARCHAR2(25),
    driver_license_no   VARCHAR2(30)
);

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( customer_id );

ALTER TABLE customer ADD CONSTRAINT customer_driver_license_no_un UNIQUE ( driver_license_no );

CREATE TABLE payment (
    payment_id          NUMBER NOT NULL,
    payment_date        DATE,
    payment_amt         NUMBER,
    rental_rental_id    NUMBER NOT NULL,
    rental_vehicle_id   INTEGER NOT NULL
);

ALTER TABLE payment ADD CONSTRAINT payment_pk PRIMARY KEY ( payment_id );

CREATE TABLE rental (
    rental_id              NUMBER NOT NULL,
    pickup_date            DATE,
    return_date            DATE,
    due_date               DATE,
    vehicle_vehicle_id     INTEGER NOT NULL,
    customer_customer_id   NUMBER NOT NULL
);

ALTER TABLE rental ADD CONSTRAINT rental_pk PRIMARY KEY ( rental_id,
                                                          vehicle_vehicle_id );

CREATE TABLE vehicle (
    vehicle_id           INTEGER NOT NULL,
    model                VARCHAR2(25),
    rental_rate_perday   NUMBER(8,2),
    type                 VARCHAR2(30)
);

ALTER TABLE vehicle ADD CONSTRAINT vehicle_pk PRIMARY KEY ( vehicle_id );

ALTER TABLE payment
    ADD CONSTRAINT payment_rental_fk FOREIGN KEY ( rental_rental_id,
                                                   rental_vehicle_id )
        REFERENCES rental ( rental_id,
                            vehicle_vehicle_id );

ALTER TABLE rental
    ADD CONSTRAINT rental_customer_fk FOREIGN KEY ( customer_customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE rental
    ADD CONSTRAINT rental_vehicle_fk FOREIGN KEY ( vehicle_vehicle_id )
        REFERENCES vehicle ( vehicle_id );

--dealing with trigger
CREATE OR REPLACE TRIGGER trg_vehicle_rental_check
BEFORE INSERT ON rental
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM rental
    WHERE vehicle_vehicle_id = :NEW.vehicle_vehicle_id
      AND return_date IS NULL;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Vehicle is already rented by another customer!');
    END IF;
END;
/


